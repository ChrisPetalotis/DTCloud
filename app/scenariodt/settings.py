"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-32v2w30lmx-yut1aa&)t#+4*787zz&&r=!jfy4op&kx1=mmx(-'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG') == 'True'

ALLOWED_HOSTS = ['*']

SITE_ID=1
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',
    'scenariodt',
    'django_plotly_dash.apps.DjangoPlotlyDashConfig',
    'crispy_forms',
    'crispy_bootstrap4',
    'storages',
    'django_tables2',
    'leaflet',
    'djgeojson',
    'channels'
]

X_FRAME_OPTIONS = 'ALLOWALL'

CRISPY_TEMPLATE_PACK = 'bootstrap4'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'scenariodt.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scenariodt.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

if 'RDS_DB_NAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': os.getenv('RDS_DB_NAME', 'user_db'),
            'USER': os.getenv('RDS_USERNAME', 'dtcloudthesis'),
            'PASSWORD': os.getenv('RDS_PASSWORD', 'dtcloudthesis'),
            'HOST': os.getenv('RDS_HOSTNAME', 'user_db'),
            'PORT': os.getenv('RDS_PORT', '5432'),
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': os.getenv('DT_DATABASE_ENGINE', 'mysql.connector.django'),
            'NAME': os.getenv('MYSQL_DATABASE', 'dtcloudthesis'),
            'USER': os.getenv('MYSQL_USER', 'dtcloudthesis'),
            'PASSWORD': os.getenv('MYSQL_PASSWORD', 'dtcloudthesis'),
            'HOST': os.getenv('MYSQL_HOST', 'localhost'),
            'PORT': '3306',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LEAFLET_CONFIG = {
    'DEFAULT_CENTER': (52.5, 6.0),
    'DEFAULT_ZOOM': 7,
    'TILES': 'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATICFILES_DIRS = [os.path.join(BASE_DIR, "scenariodt", "static")]
# print("STATICFILES_DIRS", STATICFILES_DIRS)
# S3 = os.getenv('S3') == 'True'

# if S3:
#     AWS_S3_REGION_NAME = 'eu-central-1'
#     AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
#     AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
#     AWS_STORAGE_BUCKET_NAME = 'scenario-dt-bucket'
#     AWS_DEFAULT_ACL = 'public-read'
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
#     AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
#     # s3 static settings
#     AWS_LOCATION = 'static'
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
#     STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# else:
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "scenariodt/public/static/"

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "scenariodt/public/media/"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

fuseki = os.getenv('SPARQL_ENDPOINT')
CSRF_TRUSTED_ORIGINS = ['https://*.aws.com','http://127.0.0.1', 'http://localhost', 'http://localhost:8000', f'http://{fuseki}']
# CELERY SETTINGS
CELERY_BROKER_URL = os.getenv('CELERY_BROKER', "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv('CELERY_BACKEND', "redis://redis:6379/0")

# Channel layers allow us to talk to different instances (i.e. connected user) of the application
# by storing identification information for each user in channel layers
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            
            'hosts': [('redis', 6379)],
        },
    }
}